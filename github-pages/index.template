<!DOCTYPE html>
<html lang="en">

<!-- 
  HoI4 Mod Icon Search by Yard1
  All text prefixed with @ is dynamic and will be replaced by hoi4_icon_search_gen.py
  Inspired by https://wyandotte.github.io/hoi4-icon-search/
  Search icon from https://feathericons.com/
  Uses Skeleton CSS from http://getskeleton.com/ under MIT license & some styles from https://clipboardjs.com/ -->

<head>
  <meta charset="utf-8">
  <title>@TITLE</title>
  <meta name="description" content="">
  <meta name="author" content="">

  <meta name="viewport" content="width=device-width, initial-scale=1">

  <link href="https://fonts.googleapis.com/css2?family=Raleway:ital,wght@0,400;0,700;1,400;1,700&display=swap"
    rel="stylesheet">

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/skeleton/2.0.4/skeleton.min.css">
  <style>
    body {
      font-family: "Raleway", sans-serif;
    }

    .header {
      margin-top: 2rem;
      text-align: center;
    }

    .flex-wrap {
      -ms-flex-wrap: wrap;
      flex-wrap: wrap;
    }

    .flex {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
    }

    .mx-auto {
      margin-left: auto;
      margin-right: auto;
    }

    .container {
      max-width: 1200px;
    }

    .docs-header {
      text-transform: uppercase;
      font-size: 1.4rem;
      letter-spacing: 0.2rem;
      font-weight: 600;
    }

    .docs-section {
      border-top: 1px solid #eee;
      padding: 4rem 0;
      margin-bottom: 0;
    }

    img {
      max-width: 100%;
      border-style: solid;
      border-style: none;
      margin: 0 auto;
    }

    *,
    :after,
    :before {
      border: 0 solid #dae1e7;
    }

    *,
    :after,
    :before {
      -webkit-box-sizing: inherit;
      box-sizing: inherit;
    }

    .icon {
      margin-bottom: 1rem;
      margin-left: 1rem;
      padding: 1rem;
      background-color: #f1f5f8;
      border-radius: 0.25rem;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      text-align: center;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      width: 110px;
    }

    #searchInput {
      background-image: url("images/search.svg");
      background-size: 21px;
      background-position: 6px 7px;
      background-repeat: no-repeat;
      width: 100%;
      font-size: 16px;
      padding: 12px 20px 12px 40px;
      border: 1px solid #ddd;
      margin-bottom: 12px;
    }

    .icon-container {
      list-style-type: none;
      padding: 0;
      margin: 0;
    }

    .icon-container div {
      border: 1px solid #ddd;
      margin-top: -1px;
      background-color: #f6f6f6;
      padding: 12px;
      max-width: 440px;
      text-decoration: none;
      font-size: 18px;
      color: black;
      display: block;
    }

    .icon-container div:hover:not(.header) {
      background-color: #eee;
    }

    .toggle-button input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    input:checked+.button.toggle-button-span {
      color: #fff;
      background-color: #1eaedb;
      border-color: #1eaedb;
      text-transform: uppercase;
    }

    input:checked+.button.toggle-button-span:hover {
      color: #fff;
      background-color: #33c3f0;
      border-color: #33c3f0;
    }

    input:checked+.button.toggle-button-span:focus {
      color: #fff;
      background-color: #33c3f0;
      border-color: #33c3f0;
    }

    .topbar {
      display: flex;
      flex-flow: row wrap;
      align-items: center;
    }

    .toggle-button {
      vertical-align: middle;
      width: auto;
      white-space: nowrap;
    }

    .tooltipped {
      position: relative
    }

    .tooltipped:after {
      position: absolute;
      z-index: 1000000;
      display: none;
      padding: 5px 8px;
      font: normal normal 11px/1.5 Helvetica, arial, nimbussansl, liberationsans, freesans, clean, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol";
      color: #fff;
      text-align: center;
      text-decoration: none;
      text-shadow: none;
      text-transform: none;
      letter-spacing: normal;
      word-wrap: break-word;
      white-space: pre;
      pointer-events: none;
      content: attr(aria-label);
      background: rgba(0, 0, 0, .8);
      border-radius: 3px;
      -webkit-font-smoothing: subpixel-antialiased
    }

    .tooltipped:before {
      position: absolute;
      z-index: 1000001;
      display: none;
      width: 0;
      height: 0;
      color: rgba(0, 0, 0, .8);
      pointer-events: none;
      content: "";
      border: 5px solid transparent
    }

    .tooltipped:hover:before,
    .tooltipped:hover:after,
    .tooltipped:active:before,
    .tooltipped:active:after,
    .tooltipped:focus:before,
    .tooltipped:focus:after {
      display: inline-block;
      text-decoration: none
    }

    .tooltipped-multiline:hover:after,
    .tooltipped-multiline:active:after,
    .tooltipped-multiline:focus:after {
      display: table-cell
    }

    .tooltipped-s:after,
    .tooltipped-se:after,
    .tooltipped-sw:after {
      top: 100%;
      right: 50%;
      margin-top: 5px
    }

    .tooltipped-s:before,
    .tooltipped-se:before,
    .tooltipped-sw:before {
      top: auto;
      right: 50%;
      bottom: -5px;
      margin-right: -5px;
      border-bottom-color: rgba(0, 0, 0, .8)
    }

    .tooltipped-s:after,
    .tooltipped-n:after {
      -webkit-transform: translateX(50%);
      -ms-transform: translateX(50%);
      transform: translateX(50%)
    }

    .hidden {
      display: none;
    }
  </style>

  <link rel="icon" href="@FAVICON">
</head>

<body>
  <div class="container">
    <section class="header">
      <h2 class="title">@TITLE</h1>
      <a href="https://yard1.github.io/HoI4-GFX-Search/">Looking for vanilla GFX? Click for HoI4 Icon Search.</a>
    </section>
    <div id="app">
      <div class="search-bar">
        <input type="text" id="searchInput" placeholder="Search for icons..">
      </div>
      <div id="topbar" class="topbar">
        <label class="toggle-button">
          <input id="goalsSection-toggle" type="checkbox" onclick="toggleIcons('goalsSection')" checked>
          <span class="button toggle-button-span">National Focuses</span>
        </label>
        <label class="toggle-button">
          <input id="ideasSection-toggle" type="checkbox" onclick="toggleIcons('ideasSection')" checked>
          <span class="button toggle-button-span">Ideas</span>
        </label>
        <label class="toggle-button">
          <input id="characterIdeasSection-toggle" type="checkbox" onclick="toggleIcons('characterIdeasSection')" checked>
          <span class="button toggle-button-span">Character Ideas</span>
        </label>
        <label class="toggle-button">
          <input id="texticonsSection-toggle" type="checkbox" onclick="toggleIcons('texticonsSection')" checked>
          <span class="button toggle-button-span">Texticons</span>
        </label>
        <label class="toggle-button">
          <input id="eventsSection-toggle" type="checkbox" onclick="toggleIcons('eventsSection')" checked>
          <span class="button toggle-button-span">Events</span>
        </label>
        <label class="toggle-button">
          <input id="newsEventsSection-toggle" type="checkbox" onclick="toggleIcons('newsEventsSection')" checked>
          <span class="button toggle-button-span">News Events</span>
        </label>
        <label class="toggle-button">
          <input id="agenciesSection-toggle" type="checkbox" onclick="toggleIcons('agenciesSection')" checked>
          <span class="button toggle-button-span">Agencies</span>
        </label>
        <label class="toggle-button">
          <input id="decisionsSection-toggle" type="checkbox" onclick="toggleIcons('decisionsSection')" checked>
          <span class="button toggle-button-span">Decision Icons</span>
        </label>
        <label class="toggle-button">
          <input id="decisionsCatSection-toggle" type="checkbox" onclick="toggleIcons('decisionsCatSection')" checked>
          <span class="button toggle-button-span">Decision Category Icons</span>
        </label>
        <label class="toggle-button">
          <input id="decisionsPicsSection-toggle" type="checkbox" onclick="toggleIcons('decisionsPicsSection')" checked>
          <span class="button toggle-button-span">Decision Category Pictures</span>
        </label>
      </div>
      <div id="goalsSection" class="docs-section">
        <h6 class="docs-header">National focuses (@GOALS_NUM)</h6>
        <div class="icon-container flex flex-wrap justify-left mt-3">@GOALS_ICONS</div>
      </div>
      <div id="ideasSection" class="docs-section">
        <h6 class="docs-header">Ideas (@IDEAS_NUM)</h6>
        <div class="icon-container flex flex-wrap justify-left mt-3">@IDEAS_ICONS</div>
      </div>
      <div id="characterIdeasSection" class="docs-section">
        <h6 class="docs-header">Ideas (@CHARACTERIDEAS_NUM)</h6>
        <div class="icon-container flex flex-wrap justify-left mt-3">@CHARACTERIDEAS_ICONS</div>
      </div>
      <div id="texticonsSection" class="docs-section">
        <h6 class="docs-header">Texticons (@TEXTICONS_NUM)</h6>
        <div class="icon-container flex flex-wrap justify-left mt-3">@TEXTICONS_ICONS</div>
      </div>
      <div id="eventsSection" class="docs-section">
        <h6 class="docs-header">Events (@EVENTS_NUM)</h6>
        <div class="icon-container flex flex-wrap justify-left mt-3">@EVENTS_ICONS</div>
      </div>
      <div id="newsEventsSection" class="docs-section">
        <h6 class="docs-header">News Events (@NEWSEVENTS_NUM)</h6>
        <div class="icon-container flex flex-wrap justify-left mt-3">@NEWSEVENTS_ICONS</div>
      </div>
      <div id="agenciesSection" class="docs-section">
        <h6 class="docs-header">Agencies (@AGENCIES_NUM)</h6>
        <div class="icon-container flex flex-wrap justify-left mt-3">@AGENCIES_ICONS</div>
      </div>
      <div id="decisionsSection" class="docs-section">
        <h6 class="docs-header">Decision Icons (@DECISIONS_NUM)</h6>
        <div class="icon-container flex flex-wrap justify-left mt-3">@DECISIONS_ICONS</div>
      </div>
      <div id="decisionsCatSection" class="docs-section">
        <h6 class="docs-header">Decision Category Icons (@DECISIONSCAT_NUM)</h6>
        <div class="icon-container flex flex-wrap justify-left mt-3">@DECISIONSCAT_ICONS</div>
      </div>
      <div id="decisionsPicsSection" class="docs-section">
        <h6 class="docs-header">Decision Category Pictures (@DECISIONSPICS_NUM)</h6>
        <div class="icon-container flex flex-wrap justify-left mt-3">@DECISIONSPICS_ICONS</div>
      </div>
    </div>
    <footer>
      <p>Made with ❤️ by <a href="https://github.com/Yard1">Yard1</a> with help from <a href="http://getskeleton.com/">Skeleton CSS</a>, <a href="https://feathericons.com/">Feather</a>, <a href="https://clipboardjs.com/">ClipboardJS</a> and <a href="https://www.w3schools.com/">W3Schools</a>.<br \>Last updated: @UPDATE_DATE UTC</p>
    </footer>
  </div>
</body>
<script src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.4/clipboard.min.js"></script>
<script>
  (function() {
    // Global variables for precomputed data, worker instance, and default state cache
    let iconsData = [];
    let iconsElements = [];
    let worker = null;
    let debounceTimeout;
    // Cache the default state for when the search box is empty.
    // The cache key will be a signature of the DLC filter state.
    let cachedDefaultState = { filterSignature: null, visibleIndices: null };

    // ---------------------------
    // Precompute Icon Data
    // ---------------------------
    function precomputeIcons() {
      const icons = document.getElementsByClassName("icon");
      iconsData = [];
      iconsElements = Array.from(icons);
      for (let i = 0; i < iconsElements.length; i++) {
        const icon = iconsElements[i];
        icon.dataset.iconIndex = i; // Save index as a data attribute
        const searchText = icon.getAttribute("data-search-text") || "";
        const searchTextUC = searchText.toUpperCase();
        icon.setAttribute("data-search-text-uc", searchTextUC);
        
        // Precompute DLC-related class info:
        // - "dlc-*" classes indicate the icon is shown when that DLC is enabled.
        // - "hidedlc-*" classes indicate the icon is hidden when that DLC is enabled.
        const classes = icon.className.split(" ");
        const dlcShow = [];
        const dlcHide = [];
        classes.forEach(cls => {
          if (cls.startsWith("dlc-")) {
            dlcShow.push(cls.substring(4));
          } else if (cls.startsWith("hidedlc-")) {
            dlcHide.push(cls.substring(8));
          }
        });
        iconsData.push({ index: i, searchText: searchTextUC, show: dlcShow, hide: dlcHide });
      }
    }

    // ---------------------------
    // Cache DLC Checkbox States
    // ---------------------------
    function getDLCFilters() {
      const filters = {};
      const dlcCheckboxes = document.querySelectorAll('.dlc-checkbox');
      dlcCheckboxes.forEach(checkbox => {
        filters[checkbox.value] = checkbox.checked;
      });
      return filters;
    }

    // ---------------------------
    // Batch DOM Updates via Class Toggling
    // ---------------------------
    function updateIconsDisplay(visibleIndices) {
      const visibleSet = new Set(visibleIndices);
      requestAnimationFrame(() => {
        iconsElements.forEach((icon, i) => {
          if (visibleSet.has(i)) {
            icon.classList.remove("hidden");
          } else {
            icon.classList.add("hidden");
          }
        });
      });
    }

    // ---------------------------
    // Filtering Logic with Default State Caching
    // ---------------------------
    function processFiltering() {
      const input = document.getElementById('searchInput');
      const filterWords = input.value.toUpperCase().split(' ').filter(w => w.trim() !== "");
      const dlcFilters = getDLCFilters();
      
      // If search box is empty, try to revert to the cached default state.
      if (filterWords.length === 0) {
        const currentSignature = JSON.stringify(dlcFilters);
        if (cachedDefaultState.filterSignature === currentSignature &&
            cachedDefaultState.visibleIndices) {
          updateIconsDisplay(cachedDefaultState.visibleIndices);
          return;
        } else {
          // Compute the default state: show icons based solely on the DLC filters.
          const visibleIndices = [];
          for (let i = 0; i < iconsData.length; i++) {
            const icon = iconsData[i];
            let isVisibleByDLC = true;
            // Process any hidedlc-* classes first.
            for (let j = 0; j < icon.hide.length; j++) {
              if (dlcFilters[icon.hide[j]]) {
                isVisibleByDLC = false;
                break;
              }
            }
            if (!isVisibleByDLC) continue;
            // If the icon has dlc-* classes, at least one must be enabled.
            if (icon.show.length > 0) {
              isVisibleByDLC = icon.show.some(dlcName => !!dlcFilters[dlcName]);
            }
            if (isVisibleByDLC) {
              visibleIndices.push(icon.index);
            }
          }
          // Cache the computed default state using the current DLC filters signature.
          cachedDefaultState.filterSignature = currentSignature;
          cachedDefaultState.visibleIndices = visibleIndices;
          updateIconsDisplay(visibleIndices);
          return;
        }
      }

      // For non-empty search input, perform filtering.
      if (worker) {
        worker.postMessage({ iconsData, filterWords, dlcFilters });
      } else {
        const visibleIndices = [];
        for (let i = 0; i < iconsData.length; i++) {
          const icon = iconsData[i];
          // Check if icon's search text includes every filter word.
          let matchesSearch = filterWords.every(word => icon.searchText.indexOf(word.trim()) !== -1);
          if (!matchesSearch) continue;
          let isVisibleByDLC = true;
          for (let j = 0; j < icon.hide.length; j++) {
            if (dlcFilters[icon.hide[j]]) {
              isVisibleByDLC = false;
              break;
            }
          }
          if (!isVisibleByDLC) continue;
          if (icon.show.length > 0) {
            isVisibleByDLC = icon.show.some(dlcName => !!dlcFilters[dlcName]);
          }
          if (isVisibleByDLC) {
            visibleIndices.push(icon.index);
          }
        }
        updateIconsDisplay(visibleIndices);
      }
    }

    // ---------------------------
    // Debounce the Filtering Call
    // ---------------------------
    function debouncedSearch() {
      clearTimeout(debounceTimeout);
      debounceTimeout = setTimeout(processFiltering, 300);
    }

    // ---------------------------
    // Section and DLC Toggle Helpers
    // ---------------------------
    function toggleIcons(id) {
      const checkBox = document.getElementById(id + '-toggle');
      const elementToHide = document.getElementById(id);
      elementToHide.style.display = checkBox.checked ? "block" : "none";
    }

    function toggleDLC() {
      processFiltering();
    }

    function selectAllDLCs(select) {
      const dlcCheckboxes = document.querySelectorAll('.dlc-checkbox');
      dlcCheckboxes.forEach(checkbox => {
        checkbox.checked = select;
      });
      processFiltering();
    }

    function hideEmptySections() {
      const containers = document.getElementsByClassName('icon-container');
      for (let index = 0; index < containers.length; index++) {
        if (containers[index].children.length < 1) {
          const sectionId = containers[index].parentElement.id;
          const button = document.getElementById(sectionId + '-toggle');
          if (button) {
            button.checked = false;
            button.parentElement.style.display = "none";
          }
          containers[index].parentElement.style.display = "none";
        }
      }
      processFiltering();
    }

    // ---------------------------
    // Setup the Web Worker
    // ---------------------------
    if (window.Worker) {
      const workerCode = `
        self.onmessage = function(e) {
          const { iconsData, filterWords, dlcFilters } = e.data;
          const visibleIndices = [];
          for (let i = 0; i < iconsData.length; i++) {
            const icon = iconsData[i];
            let matchesSearch = filterWords.every(word => icon.searchText.indexOf(word.trim()) !== -1);
            if (!matchesSearch) continue;
            let isVisibleByDLC = true;
            for (let j = 0; j < icon.hide.length; j++) {
              if (dlcFilters[icon.hide[j]]) {
                isVisibleByDLC = false;
                break;
              }
            }
            if (!isVisibleByDLC) continue;
            if (icon.show.length > 0) {
              isVisibleByDLC = icon.show.some(dlcName => !!dlcFilters[dlcName]);
            }
            if (isVisibleByDLC) {
              visibleIndices.push(icon.index);
            }
          }
          self.postMessage({ visibleIndices });
        };
      `;
      const blob = new Blob([workerCode], { type: 'application/javascript' });
      worker = new Worker(URL.createObjectURL(blob));
      worker.onmessage = function(e) {
        const { visibleIndices } = e.data;
        updateIconsDisplay(visibleIndices);
      };
    }

    // ---------------------------
    // DOMContentLoaded Setup
    // ---------------------------
    document.addEventListener("DOMContentLoaded", function() {
      precomputeIcons();

      const searchInput = document.getElementById('searchInput');
      searchInput.addEventListener('keyup', debouncedSearch);

      const dlcCheckboxes = document.querySelectorAll('.dlc-checkbox');
      dlcCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', debouncedSearch);
      });

      hideEmptySections();
    });

    // ---------------------------
    // Clipboard & Tooltip
    // ---------------------------
    const iconElements = document.getElementsByClassName('icon');
    for (let i = 0; i < iconElements.length; i++) {
      iconElements[i].addEventListener('mouseleave', clearTooltip);
      iconElements[i].addEventListener('blur', clearTooltip);
    }
    function clearTooltip(e) {
      e.currentTarget.setAttribute('class', e.currentTarget.getAttribute('class').replace(' tooltipped tooltipped-s', ''));
      e.currentTarget.removeAttribute('aria-label');
    }
    function showTooltip(elem, msg) {
      elem.setAttribute('class', elem.getAttribute('class') + ' tooltipped tooltipped-s');
      elem.setAttribute('aria-label', msg);
    }
    function fallbackMessage(action) {
      let actionMsg = '';
      let actionKey = (action === 'cut' ? 'X' : 'C');
      if (/iPhone|iPad/i.test(navigator.userAgent)) {
        actionMsg = 'No support :(';
      } else if (/Mac/i.test(navigator.userAgent)) {
        actionMsg = 'Press ⌘-' + actionKey + ' to ' + action;
      } else {
        actionMsg = 'Press Ctrl-' + actionKey + ' to ' + action;
      }
      return actionMsg;
    }
    var clipboard = new ClipboardJS('.icon');
    clipboard.on('success', function (e) {
      e.clearSelection();
      console.info('Action:', e.action);
      console.info('Text:', e.text);
      console.info('Trigger:', e.trigger);
      showTooltip(e.trigger, 'Copied name to clipboard!');
    });
    clipboard.on('error', function (e) {
      console.error('Action:', e.action);
      console.error('Trigger:', e.trigger);
      showTooltip(e.trigger, fallbackMessage(e.action));
    });

    // Expose functions to the global scope for inline HTML calls.
    window.toggleIcons = toggleIcons;
    window.toggleDLC = toggleDLC;
    window.selectAllDLCs = selectAllDLCs;
  })();
</script>

</html>
